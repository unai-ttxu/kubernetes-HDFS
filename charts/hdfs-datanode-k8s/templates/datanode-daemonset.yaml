# Provides datanode helper scripts.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "hdfs-k8s.datanode.fullname" . }}-scripts
  labels:
    app: {{ template "hdfs-k8s.datanode.name" . }}
    chart: {{ template "hdfs-k8s.subchart" . }}
    release: {{ .Release.Name }}
data:
  check-status.sh: |
    #!/usr/bin/env bash
    # Exit on error. Append "|| true" if you expect an error.
    set -o errexit
    # Exit on error inside any functions or subshells.
    set -o errtrace
    # Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
    set -o nounset
    # Catch an error in command pipes. e.g. mysqldump fails (but gzip succeeds)
    # in `mysqldump |gzip`
    set -o pipefail
    # Turn on traces, useful while debugging.
    set -o xtrace

    # Check if datanode registered with the namenode and got non-null cluster ID.
    _PORTS="50075 1006"
    _URL_PATH="jmx?qry=Hadoop:service=DataNode,name=DataNodeInfo"
    _CLUSTER_ID=""
    for _PORT in $_PORTS; do
      _CLUSTER_ID+=$(curl -s http://localhost:${_PORT}/$_URL_PATH |  \
          grep ClusterId) || true
    done
    echo $_CLUSTER_ID | grep -q -v null
---
# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: {{ template "hdfs-k8s.datanode.fullname" . }}
  labels:
    app: {{ template "hdfs-k8s.datanode.name" . }}
    chart: {{ template "hdfs-k8s.subchart" . }}
    release: {{ .Release.Name }}
  annotations:
    # TODO: Deprecated. Replace tolerate-unready-endpoints with
    # v1.Service.PublishNotReadyAddresses.
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - port: 1006
    name: dn
  - port: 50075
    name: http
  clusterIP: None
  selector:
    app: {{ template "hdfs-k8s.datanode.name" . }}
    release: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "hdfs-k8s.datanode.fullname" . }}
  labels:
    app: {{ template "hdfs-k8s.datanode.name" . }}
    chart: {{ template "hdfs-k8s.subchart" . }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "hdfs-k8s.datanode.fullname" . }}
  replicas: {{ .Values.global.datanodeSize }}
  selector:
    matchLabels:
      app: {{ template "hdfs-k8s.datanode.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "hdfs-k8s.datanode.name" . }}
        release: {{ .Release.Name }}
      annotations:
      {{- if and .Values.global.kerberos.enabled .Values.global.vault.enabled }}
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject-secret-keytab: {{ template "hdfs-k8s.secretsbundle.vault-path" . }}
        vault.hashicorp.com/secret-volume-path-keytab: /vault/secrets
        vault.hashicorp.com/ca-cert: /vault/tls/ca.crt
        vault.hashicorp.com/role: {{ .Values.global.vault.role }}
        vault.hashicorp.com/tls-secret: keos-ca
      {{- end }}
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- else if .Values.global.defaultAffinityEnabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - {{ template "hdfs-k8s.datanode.name" . }}
                  - key: "release"
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
        - name: datanode
          image: uhopper/hadoop-datanode:2.7.2
          env:
            - name: HADOOP_CUSTOM_CONF_DIR
              value: /etc/hadoop-custom-conf
            - name: MULTIHOMED_NETWORK
              value: "0"
            {{- if and .Values.global.kerberos.enabled .Values.global.kerberos.jsvcEnabled }}
            - name: HADOOP_SECURE_DN_USER
              value: root
            - name: JSVC_OUTFILE
              value: /dev/stdout
            - name: JSVC_ERRFILE
              value: /dev/stderr
            - name: JSVC_HOME
              value: /jsvc-home
            {{- end }}
          ports:
          - containerPort: 1006
            name: dn
          - containerPort: 50075
            name: http
          livenessProbe:
            exec:
              command:
                - /dn-scripts/check-status.sh
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - /dn-scripts/check-status.sh
            initialDelaySeconds: 60
            periodSeconds: 30
          volumeMounts:
            - name: dn-scripts
              mountPath: /dn-scripts
              readOnly: true
            - name: hdfs-config
              mountPath: /etc/hadoop-custom-conf
              readOnly: true
            - name: datadir
              mountPath: /hadoop/dfs/data/
            {{- if .Values.global.kerberos.enabled }}
            - name: kerberos-config
              mountPath: /etc/krb5.conf
              subPath: {{ .Values.global.kerberosConfigFileName }}
              readOnly: true
            - name: kerberos-keytab-copy
              mountPath: /etc/security/
              readOnly: true
            {{- if .Values.global.kerberos.jsvcEnabled }}
            - name: jsvc-home
              mountPath: /jsvc-home
            {{- end }}
            {{- end }}
      {{- if and .Values.global.kerberos.enabled .Values.global.vault.enabled }}
      initContainers:
        - name: copy-kerberos-keytab
          image: busybox:1.27.1
          command: ['sh', '-c']
          args:
            - grep ${KEYTAB_NAME}_keytab /vault/secrets/keytab | awk '{ print $2 }' | base64 -d > /kerberos-keytab-copy/hdfs.keytab
          env:
            - name: KEYTAB_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: kerberos-keytab-copy
              mountPath: /kerberos-keytab-copy
        {{- if .Values.global.kerberos.jsvcEnabled }}
        - name: copy-jsvc
          # Pull by digest because the image doesn't have tags to pin.
          image: mschlimb/jsvc@sha256:bf20eb9a319e9a2f87473d8da7418d21503a97528b932800b6b8417cd31e30ef
          command: ['sh', '-c']
          args:
            - cp /usr/bin/jsvc /jsvc-home/jsvc
          volumeMounts:
            - name: jsvc-home
              mountPath: /jsvc-home
        {{- end }}
      {{- end }}
      restartPolicy: Always
      volumes:
        - name: dn-scripts
          configMap:
            name: {{ template "hdfs-k8s.datanode.fullname" . }}-scripts
            defaultMode: 0744
        - name: hdfs-config
          configMap:
            name: {{ template "hdfs-k8s.config.fullname" . }}
        {{- if .Values.global.kerberos.enabled }}
        - name: kerberos-config
          configMap:
            name: {{ template "krb5-configmap" . }}
        - name: kerberos-keytab-copy
          emptyDir: {}
        {{- if .Values.global.kerberos.jsvcEnabled }}
        - name: jsvc-home
          emptyDir: {}
        {{- end }}
        {{- end }}
      {{- if .Values.global.podSecurityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.global.podSecurityContext.runAsUser }}
        fsGroup: {{ .Values.global.podSecurityContext.fsGroup }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
      {{- end }}
      {{- if .Values.persistence.selector }}
        selector:
{{ toYaml .Values.persistence.selector | indent 10 }}
      {{- end }}
